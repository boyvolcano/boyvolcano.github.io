@InProceedings{10.1007/978-3-031-71162-6_28,
author="Sun, Yican
and Ji, Ruyi
and Fang, Jian
and Jiang, Xuanlin
and Chen, Mingshuai
and Xiong, Yingfei",
editor="Platzer, Andr{\'e}
and Rozier, Kristin Yvonne
and Pradella, Matteo
and Rossi, Matteo",
title="Proving Functional Program Equivalence viaÂ Directed Lemma Synthesis",
booktitle="Formal Methods",
year="2025",
publisher="Springer Nature Switzerland",
address="Cham",
pages="538--557",
abstract="Proving equivalence between functional programs is a fundamental problem in program verification, which often amounts to reasoning about algebraic data types (ADTs) and compositions of structural recursions. Modern theorem provers provide structural induction for such reasoning, but a structural induction on the original theorem is often insufficient for many equivalence theorems. In such cases, one has to invent a set of lemmas, prove these lemmas by additional induction, and use these lemmas to prove the original theorem. There is, however, a lack of systematic understanding of what lemmas are needed for inductive proofs and how these lemmas can be synthesized automatically. This paper presents directed lemma synthesis, an effective approach to automating equivalence proofs by discovering critical lemmas using program synthesis techniques. We first identify two induction-friendly forms of propositions that give formal guarantees to the progress of the proof. We then propose two tactics that synthesize and apply lemmas, thereby transforming the proof goal into induction-friendly forms. Both tactics reduce lemma synthesis to a set of independent and typically small program synthesis problems that can be efficiently solved. Experimental results demonstrate the effectiveness of our approach: Compared to state-of-the-art equivalence checkers employing heuristic-based lemma enumeration, directed lemma synthesis saves 95.47{\%} runtime on average and solves 38 more tasks over an extended version of the standard benchmark set.",
isbn="978-3-031-71162-6"
}

